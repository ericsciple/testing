name: "CodeQL"

on:
  push:
  pull_request:
    branches: [ master ]

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  issues: write
  pull-requests: write
  repository-projects: write
  statuses: write
  security-events: write

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        # CodeQL supports [ $supported-codeql-languages ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1


#name: CI
#on:
 # push:
#jobs:
 # build:
  #  runs-on: ubuntu-latest
   # steps:
    #  - name: Dump gitub context
     #   env:
      #    GITHUB_CONTEXT: ${{ toJson(github) }}
       # run: echo "$GITHUB_CONTEXT"
#  build:
 #   runs-on: ubuntu-latest
  #  container: alpine:latest
   # steps:
    #  - run: |
     #     echo hello > hello.txt
      #- uses: actions/upload-artifact@v2
       # with:
        #  name: my-artifact
         # path: hello.txt
#  test:
 #   needs: build
  #  runs-on: ubuntu-latest
   # steps:
    #  - uses: actions/download-artifact@v2
     #   with:
      #    name: my-artifact
      #- run: cat hello.txt





      #- uses: docker://alpine:latest
#      - uses: ericsciple/dockerfile-action@main
 #       env:
  #        MY_SECRET: ${{ secrets.MULTILINE_JSON_SECRET }}
#  build:
 #   runs-on: ubuntu-latest
  #  steps:
   #   - name: Dump gitub context
    #    env:
     #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #  run: echo "$GITHUB_CONTEXT"
#  test:
 #   runs-on: ubuntu-latest
  #  steps:
   #   - run: |
    #      printenv|sort

#      - id: my-step-1
 #       run: |
  #        echo hello
   #       #echo ::set-output name=foo1::bar1
    #  - env:
     #     MY_ENV: ${{ steps.my-step-1.outputs.stdout }}
      #  run: |
       #   printenv|sort

#   outputs:
#     foo: ${{ steps.my-step-2.outputs.foo1 }}
#     - id: my-step-2
#       run: |
#         echo ::set-output name=foo1::new bar value

#      - uses: actions/checkout@v2
 #     - run: echo "${{ hashFiles('**/foo.txt', '**/*txt') }}"
      #- env:
      #    GITHUB_TOKEN: ${{ github.token }}
      #  run: |
      #    echo "${GITHUB_TOKEN:0:10}"
      #    echo "${GITHUB_TOKEN:10}"
      #- run: ping -c 3600 127.0.0.1
#      - env:
 #         GITHUB_TOKEN: ${{ github.token }}
  #      run: |
   #       url="https://api.github.com/repos/$GITHUB_REPOSITORY/pulls" # GITHUB_REPOSITORY format is: OWNER/REPO
    #      url="https://api.github.com/app"
     #     url="https://api.github.com/repos/ericsciple/testing/issues"
      #    body="{\"title\": \"testing something\"}"
       #   http_code="$(curl --silent --output response.json --write-out '%{http_code}' --header "Authorization: token $GITHUB_TOKEN" --request POST --data "$body" "$url")"
        #  cat response.json || :
         # echo "HTTP CODE '$http_code'"
#      - run: |
 #         printenv|sort
  #    - name: Dump strategy context
   #     env:
    #      STRATEGY_CONTEXT: ${{ toJson(strategy) }}
     #   run: echo "$STRATEGY_CONTEXT"
#      - name: Dump matrix context
 #       env:
  #        MATRIX_CONTEXT: ${{ toJson(matrix) }}
   #     run: echo "$MATRIX_CONTEXT"
    #  - name: Dump job context
     #   env:
      #    JOB_CONTEXT: ${{ toJson(job) }}
       # run: echo "$JOB_CONTEXT"



# composite.yml
#   outputs:
#     foo: ${{ steps.my-step-2.outputs.foo1 }}
#   steps:
#     - id: my-step-1
#       run: |
#         echo ::set-output name=foo1::bar1
#     - id: my-step-2
#       run: |
#         echo ::set-output name=foo1::new bar value



#      - uses: actions/checkout@users/ericsciple/m266wiki
 #       with:
  #        repository: ericsciple/more-testing
   #       path: more-testing
    #  - uses: actions/checkout@users/ericsciple/m266wiki
     #   with:
      #    repository: ericsciple/testing.wiki
       #   path: wiki
#      - run: |
 #         echo hello > git
  #        chmod +x git
   #       echo "::add-path::$PWD"
#      - uses: actions/checkout@users/ericsciple/m266wiki
 #       with:
  #        repository: ericsciple/testing.wiki
   #       path: wiki-tarball
#      - uses: actions/checkout@users/ericsciple/m266wiki
 #       with:
  #        repository: ericsciple/more-testing
   #       path: more-testing-tarball
          
          
          
#      - env:
 #         STRATEGY_CONTEXT: ${{ toJson(strategy) }}
  #      run: echo "$STRATEGY_CONTEXT"
#      - run: |
 #         echo job index ${{ strategy.job-index }}
#      - run: |
 #         echo "github.workspace=${{ github.workspace }}"
  #        echo "----------------------------------------"
   #       printenv|sort
          
#      - id: my-step
 #       run: |
  #        echo "::set-output name=my-output::my-value"
   #   - run: |
    #      echo "the value is ${{ steps.my-step.outputs.my-output }}"

#      - uses: actions/checkout@users/ericsciple/m265branch
 #     - uses: actions/checkout@users/ericsciple/m265branch
  #      with:
   #       repository: ericsciple/more-testing
    #      path: more-testing
     # - run: |
      #    git status
       #   echo '----------------------------------------'
        #  cd more-testing
         # git status
