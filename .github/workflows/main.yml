name: CI

on: [push]


jobs:
  build:
#    strategy:
 #     matrix:
  #      runs-on: [ubuntu-16.04]
   # runs-on: ${{ matrix.runs-on }}
    #steps:
     # - run: |
      #    git --version
       #   git lfs --version
    runs-on: [self-hosted, macos]
    #runs-on: windows-latest
    steps:
      - uses: ericsciple/checkout@users/ericsciple/action
        with:
          repository: actions/checkout
          ref: refs/tags/v1
 #     - uses: ericsciple/checkout@users/ericsciple/action
  #      continue-on-error: true
   #     with:
    #      repo: ericsciple/testing
     #     ref: refs/heads/some
      #- uses: ericsciple/checkout@users/ericsciple/action
       # continue-on-error: true
        #with:
         # repo: ericsciple/testing
          #ref: refs/heads/some/branch



          
          
          
          
          
          
          
          

#      - shell: cmd
 #       run: |
  #        echo Verify node is in the PATH:
   #       where node
    #      echo ----------------------------------------
     #     echo Invoke "node -e "console.log('hello world')"" on the command line:
      #    node -e "console.log('hello world')"
       #   echo ----------------------------------------
        #  echo Installing @actions/exec
         # call npm install @actions/exec ./
          #echo ----------------------------------------
          #echo Invoke "node -e "console.log('hello world')"" using @actions/exec:
          #node -e "var exec = require('@actions/exec'); exec.exec('node', ['-e', `console.log('hello world')`]);"
      # - shell: cmd
      #   run: |
      #     echo Verify npm is in the PATH:
      #     where npm
      #     echo ----------------------------------------
      #     echo Invoking "npm --version" works on the command line:
      #     call npm --version
      #     echo ----------------------------------------
      #     echo Installing @actions/exec
      #     call npm install @actions/exec ./
      #     echo ----------------------------------------
      #     echo Invoking "npm --version" using @actions/exec fails:
      #     node -e "var exec = require('@actions/exec'); exec.exec('npm --version');"


    #runs-on: self-hosted
    #runs-on: [self-hosted, macos]
    #runs-on: [self-hosted, linux]
    # runs-on: windows-latest
    # runs-on: ubuntu-latest
      
    # steps:
      # - run: |
      #     npm install @actions/exec ./
      #     echo ----------------------------------------
      #     node -e "var exec = require('@actions/exec'); exec.exec('npm --version');"
      #     echo ----------------------------------------
      #     node -e "var exec = require('@actions/exec'); exec.exec('npm', ['--version']);"

      # - shell: cmd
      #   run: |
      #     echo ----------------------------------------
      #     echo Creating cmd file
      #     mkdir test
      #     cd test
      #     echo echo hello world > my-command.cmd
      #     dir /s /b
      #     type my-command.cmd
      #     echo ----------------------------------------
      #     echo Updating the PATH
      #     set "PATH=%PATH%;%CD%"
      #     echo %PATH%
      #     echo ----------------------------------------
      #     cd ..
      #     echo CD is %CD%
      #     echo ----------------------------------------
      #     echo Invoking command
      #     call my-command.cmd "hello&goodbye"
      #     echo ----------------------------------------
      #     echo Installing @actions/exec
      #     call npm install @actions/exec ./
      #     echo ----------------------------------------
      #     echo Invoke my-command using @actions/exec
      #     node -e "var exec = require('@actions/exec'); exec.exec('my-command');"
      #     echo ----------------------------------------
      #     echo Invoke my-command.cmd using @actions/exec
      #     node -e "var exec = require('@actions/exec'); exec.exec('my-command.cmd');"
      #     echo ----------------------------------------
      #     where npm
      #     echo ----------------------------------------
      #     echo Invoking npm --version
      #     call npm --version
      #     echo ----------------------------------------
      #     echo Invoke npm --version using @actions/exec
      #     node -e "var exec = require('@actions/exec'); exec.exec('npm --version');"
      #     echo ----------------------------------------

      # - shell: cmd
      #   run: |
      #     where gulp
      #     where npm
      #     where npx

      # - shell: cmd
      #   run: |
      #     echo Adding msbuild to the PATH
      #     set "PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin"
      #     echo %PATH%

      #     echo ----------------------------------------
      #     echo Creating sample proj file:
      #     echo ^<?xml version="1.0" encoding="utf-8"?^> > "my sample.proj"
      #     echo ^<Project ToolsVersion="15.0"  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"^> >> "my sample.proj"
      #     echo   ^<Target Name="HelloWorld"^> >> "my sample.proj"
      #     echo     ^<Message Text="Hello"^>^</Message^> >> "my sample.proj"
      #     echo     ^<Message Text="World"^>^</Message^> >> "my sample.proj"
      #     echo   ^</Target^> >> "my sample.proj"
      #     echo ^</Project^> >> "my sample.proj"
      #     type "my sample.proj"

      #     echo ----------------------------------------
      #     dir

      #     echo ----------------------------------------
      #     echo Building the proj
      #     "msbuild" /t:HelloWorld "my sample.proj"


      # - shell: cmd
      #   run: |

      #     echo Adding devenv to the PATH
      #     set "PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE"
      #     echo %PATH%

      #     echo ----------------------------------------
      #     echo Creating sample proj file:
      #     echo ^<?xml version="1.0" encoding="utf-8"?^> > sample.proj
      #     echo ^<Project ToolsVersion="15.0"  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"^> >> sample.proj
      #     echo   ^<Target Name="Build"^> >> sample.proj
      #     echo     ^<Message Text="Hello"^>^</Message^> >> sample.proj
      #     echo     ^<Message Text="World"^>^</Message^> >> sample.proj
      #     echo   ^</Target^> >> sample.proj
      #     echo ^</Project^> >> sample.proj
      #     type sample.proj

      #     echo ----------------------------------------
      #     dir

      #     echo ----------------------------------------
      #     echo Building the proj
      #     devenv /build sample.proj


# C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe
# C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\amd64\MSBuild.exe

      # - shell: cmd
      #   run: |
      #     echo Searching for msbuild under C:\Program Files
      #     cd /d C:\
      #     dir /s /b "C:\Program Files\msbuild.exe"

      #     echo Searching for msbuild under C:\Program Files (x86)
      #     cd /d C:\
      #     dir /s /b "C:\Program Files (x86)\msbuild.exe"
      
      
      
#    container: alpine/git
 #   services:
  #    nginx:
   #     image: nginx
    #    ports:
     #     - 8080:80
      #  env:
       #   NGINX_PORT: 80

    #steps:
     # - run: printenv|sort
      #- uses: ericsciple/checkout@users/ericsciple/action

#    steps:
 #     - run: |
  #        printenv|sort
#      - uses: ericsciple/checkout@users/ericsciple/action
 #       with:
  #        #repository: ericsciple/testingprivate
   #       repository: ericsciple/testing
    #      ref: test-data/v2/submodule
     #     submodules: recursive
      #    token: ${{ secrets.PRIVATE_SUBMODULE }}
      #- run: find .

#      - uses: actions/checkout@v1
#      - run: |
 #         echo "::add-matcher::$PWD/csc.json"
  #        echo "SnippetParsing.cs(7,2): error CS1022: Type or namespace definition, or end-of-file expected [$HOME/repos/actions/runner/_layout/_work/testing/testing/BumblebeeTests/BumblebeeTests.csproj]"




#- uses: actions/checkout@releases/v1
      #- run: git config --list
      #- uses: ericsciple/checkout@users/ericsciple/action
#      - run: |
 #         echo ::add-mask::hello%0Aworld
  #        echo hello
   #       echo world
#      - uses: ericsciple/checkout@users/ericsciple/action
 #       with:
  #        ref: foo30-lightweight
   #   - run: pwd ; ls -la
    #  - uses: ericsciple/checkout@users/ericsciple/action
     #   with:
      #    ref: foo30-annotated
       #   path: other
#      - run: pwd ; ls -la
 #     - run: cd ../testing ; ls -la
  #    - uses: ericsciple/checkout@users/ericsciple/action
   #     with:
    #      repository: ericsciple/checkout
     # - run: cd ../checkout ; ls -la




#      - uses: actions/checkout@v1
#      - run: dir
#      - name: asdf
 #       run: |
  #        echo hash = ${{ hashFiles('**/READM?.md') }}
#      - name: asdf
 #       run: |
  #        echo hash = ${{ hashFiles('**\\READM?.md') }}
   #   - name: asdf
    #    run: |
     #     echo hash = ${{ hashFiles('**\READM?.md') }}
#      - name: asdf
 #       run: |
  #        echo hash = ${{ hashFiles('C:\\runner\\_layout\\_work\\testing\\testing\\**\\READM?.md') }}
      #- run: pwd ; ls -la
#      - name: asdf
 #       run: |
  #        echo hash = ${{ hashFiles('C:\\runner\\_layout\\_work\\testing\\testing\\**\\READM?.md') }}
   #   - name: asdf
    #    run: |
     #     echo hash = ${{ hashFiles('C:\\runner\\_layout\\_work\\testing\\testing\\**/READM?.md') }}
#      - name: asdf
 #       run: |
  #        echo hash = ${{ hashFiles('**/READM?.md') }}
#      - name: asdf
 #       run: |
  #        echo hash = ${{ hashFiles(format('{0}/{1}', github.workspace, 'READM?.md')) }}
      #- name: asdf
      #  run: |
      #    echo hash = ${{ hashFiles('nosuch/READM?.md') }}
#      - name: asdf
 #       run: |
  #        echo hash = ${{ hashFiles('/nosuch/READM?.md') }}
#      - name: asdf
 #       run: |
  #        echo hash = ${{ hashFiles('**/READM?.md') }}
#      - name: asdf
 #       run: |
  #        echo hash = ${{ hashFiles('**/readm?.md') }}
#      - name: asdf
 #       run: |
  #        echo hash = ${{ hashFiles('**/+(README).md') }}

