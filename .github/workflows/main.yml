name: "CI"
on:
  push:
    branches:
      - main
      - protected-*
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  __build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, X64]
    steps:
      - run: echo "$MATRIX_DATA"
        env:
          MATRIX_DATA: ${{ tojson(matrix) }}


#      - run: find /home/runner | grep _diag
 #     - run: cat "$(ls -1 /home/runner/runners/2.305.0/_diag/Worker_* | sort | tail -n1)"
#  call-1:
 #   uses: ./.github/workflows/reuse.yml
#  call-2:
 #   uses: ./.github/workflows/reuse.yml


#  build:
 #   if: ${{ fromJson('{' }}
  #  #runs-on: ${{ fromJson('{') }}
   # runs-on: ubuntu-latest, self-hosted, nosuch
    #steps:
     # - run: |
      #    set -x
#
 #         if [[ "$GITHUB_REF_PROTECTED" != 'false' ]]; then
  #          echo 'Deployment to production is only allowed from a protected ref'
   #         exit 1
    #      fi
#
 #         BEFORE_SHA="$(cat $GITHUB_EVENT_PATH | jq -r .before)"
  #        if [[ "${#BEFORE_SHA}" != 40 ]]; then
   #         echo 'Unable to determine before-SHA'
    #        exit 1
     #     fi
      #    
       #   if [[ "$BEFORE_SHA" != '0000000000000000000000000000000000000000' ]]; then
        #    echo 'Deployment to production is not allowed from the initial commit for a protected ref'
         #   exit 1
          #fi
#      - run: |
 #         printenv | sort
  #    - run: echo "$GITHUB_CONTEXT"
   #     env:
    #      GITHUB_CONTEXT: ${{ toJson(github) }}



#    uses: ericsciple/testing/.github/workflows/reuse.yml@5bf80d4cab6c2f781118016873aa0b411abb7475
#  build:
 #   runs-on: ubuntu-latest
  #  steps:
   #   - run: printenv|sort
    #  - run: ps -ef
     # - run: cat /home/runner/runners/2.284.0/.runner
      #- run: cat /home/runner/runners/2.284.0/.credentials

#  deploy:
 #   uses: ericsciple/testing/.github/workflows/reuse.yml@master

#  build:
 #   runs-on: ubuntu-latest
  #  timeout-minutes: 1
   # permissions:
    #  contents: read
#    #container: ubuntu:latest
 #   strategy:
  #    fail-fast: true
   #   max-parallel: 1
    #  matrix:
     #   vector-1: [a, b]
#   #     vector-2: [y, z]
 #   steps:
  #    - uses: actions/checkout@v2
   #     with:
    #      submodules: true
     # - run: |
      #    cat .git/config
#      - run: |
 #         echo "token=${{ secrets['system.github.token'] }}"
  #    - run: exit 1
#      - run: |
 #         cd ${{ github.workspace }}
#      - continue-on-error: ${{ 'false' || 'false' }}
 #       run: echo hello
  #    - name: Dump strategy context
   #     env:
    #      STRATEGY_CONTEXT: ${{ toJson(strategy) }}
     #   run: echo "$STRATEGY_CONTEXT"
      #- name: Dump gitub context
       # env:
        #  GITHUB_CONTEXT: ${{ toJson(GitHub.Event) }}
#        run: echo "$GITHUB_CONTEXT"
 #     - name: Dump job context
  #      env:
   #       JOB_CONTEXT: ${{ toJson(job) }}
    #    run: echo "$JOB_CONTEXT"
     # - run: |
      #    printenv|sort
       #   ping -c 300 127.0.0.1
#      - if: ${{ failure() }}
 #       run: echo failed
  #    - if: ${{ cancelled() }}
   #     run: echo cancelled
#      - run: |
 #         echo "::notice::foo"
  #    - run: |
   #       echo hello>hello.txt
    #  - uses: actions/upload-artifact@v2
     #   with:
      #    artifact-name: hi
       #   path: hello.txt



#      - id: step-1
 #       continue-on-error: true
  #      timeout-minutes: 1
   #     run: |
    #      ping -c 100 127.0.0.1
     # - name: Dump steps context
      #  env:
       #   STEPS_CONTEXT: ${{ toJson(steps) }}
        #run: echo "$STEPS_CONTEXT"

#jobs:
 # build:
  #  runs-on: ubuntu-latest
   # steps:
    #  - uses: actions/checkout@v2
     # - uses: ericsciple/composite-action@master
      
#permissions:
 # #actions: write
  ##checks: write
#  contents: read
 # #deployments: write
  ###issues: write
#  ##pull-requests: write
 # ##repository-projects: write
  ###statuses: write
#  security-events: write

#  analyze:
 #   name: Analyze
  #  if: false
   # runs-on: ubuntu-latest
    #permissions:
     # contents: read
      #security-events: write
#    strategy:
 #     fail-fast: false
  #    matrix:
   #     language: [ 'javascript' ]
#    steps:
 #   - name: Checkout repository
  #    uses: actions/checkout@v2
   # - name: Initialize CodeQL
    #  uses: github/codeql-action/init@v1
     # with:
      #  languages: ${{ matrix.language }}
#    - name: Autobuild
 #     uses: github/codeql-action/autobuild@v1
  #  - name: Perform CodeQL Analysis
   #   uses: github/codeql-action/analyze@v1

#  build:
 #   runs-on: ubuntu-latest
  #  container: alpine:latest
   # steps:
    #  - run: |
     #     echo hello > hello.txt
      #- uses: actions/upload-artifact@v2
       # with:
        #  name: my-artifact
         # path: hello.txt
#  test:
 #   needs: build
  #  runs-on: ubuntu-latest
   # steps:
    #  - uses: actions/download-artifact@v2
     #   with:
      #    name: my-artifact
      #- run: cat hello.txt





      #- uses: docker://alpine:latest
#      - uses: ericsciple/dockerfile-action@main
 #       env:
  #        MY_SECRET: ${{ secrets.MULTILINE_JSON_SECRET }}
#  build:
 #   runs-on: ubuntu-latest
  #  steps:
   #   - name: Dump gitub context
    #    env:
     #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #  run: echo "$GITHUB_CONTEXT"
#  test:
 #   runs-on: ubuntu-latest
  #  steps:
   #   - run: |
    #      printenv|sort

#      - id: my-step-1
 #       run: |
  #        echo hello
   #       #echo ::set-output name=foo1::bar1
    #  - env:
     #     MY_ENV: ${{ steps.my-step-1.outputs.stdout }}
      #  run: |
       #   printenv|sort

#   outputs:
#     foo: ${{ steps.my-step-2.outputs.foo1 }}
#     - id: my-step-2
#       run: |
#         echo ::set-output name=foo1::new bar value

#      - uses: actions/checkout@v2
 #     - run: echo "${{ hashFiles('**/foo.txt', '**/*txt') }}"
      #- env:
      #    GITHUB_TOKEN: ${{ github.token }}
      #  run: |
      #    echo "${GITHUB_TOKEN:0:10}"
      #    echo "${GITHUB_TOKEN:10}"
      #- run: ping -c 3600 127.0.0.1
#      - env:
 #         GITHUB_TOKEN: ${{ github.token }}
  #      run: |
   #       url="https://api.github.com/repos/$GITHUB_REPOSITORY/pulls" # GITHUB_REPOSITORY format is: OWNER/REPO
    #      url="https://api.github.com/app"
     #     url="https://api.github.com/repos/ericsciple/testing/issues"
      #    body="{\"title\": \"testing something\"}"
       #   http_code="$(curl --silent --output response.json --write-out '%{http_code}' --header "Authorization: token $GITHUB_TOKEN" --request POST --data "$body" "$url")"
        #  cat response.json || :
         # echo "HTTP CODE '$http_code'"
#      - run: |
 #         printenv|sort
  #    - name: Dump strategy context
   #     env:
    #      STRATEGY_CONTEXT: ${{ toJson(strategy) }}
     #   run: echo "$STRATEGY_CONTEXT"
#      - name: Dump matrix context
 #       env:
  #        MATRIX_CONTEXT: ${{ toJson(matrix) }}
   #     run: echo "$MATRIX_CONTEXT"
    #  - name: Dump job context
     #   env:
      #    JOB_CONTEXT: ${{ toJson(job) }}
       # run: echo "$JOB_CONTEXT"



# composite.yml
#   outputs:
#     foo: ${{ steps.my-step-2.outputs.foo1 }}
#   steps:
#     - id: my-step-1
#       run: |
#         echo ::set-output name=foo1::bar1
#     - id: my-step-2
#       run: |
#         echo ::set-output name=foo1::new bar value



#      - uses: actions/checkout@users/ericsciple/m266wiki
 #       with:
  #        repository: ericsciple/more-testing
   #       path: more-testing
    #  - uses: actions/checkout@users/ericsciple/m266wiki
     #   with:
      #    repository: ericsciple/testing.wiki
       #   path: wiki
#      - run: |
 #         echo hello > git
  #        chmod +x git
   #       echo "::add-path::$PWD"
#      - uses: actions/checkout@users/ericsciple/m266wiki
 #       with:
  #        repository: ericsciple/testing.wiki
   #       path: wiki-tarball
#      - uses: actions/checkout@users/ericsciple/m266wiki
 #       with:
  #        repository: ericsciple/more-testing
   #       path: more-testing-tarball
          
          
          
#      - env:
 #         STRATEGY_CONTEXT: ${{ toJson(strategy) }}
  #      run: echo "$STRATEGY_CONTEXT"
#      - run: |
 #         echo job index ${{ strategy.job-index }}
#      - run: |
 #         echo "github.workspace=${{ github.workspace }}"
  #        echo "----------------------------------------"
   #       printenv|sort
          
#      - id: my-step
 #       run: |
  #        echo "::set-output name=my-output::my-value"
   #   - run: |
    #      echo "the value is ${{ steps.my-step.outputs.my-output }}"

#      - uses: actions/checkout@users/ericsciple/m265branch
 #     - uses: actions/checkout@users/ericsciple/m265branch
  #      with:
   #       repository: ericsciple/more-testing
    #      path: more-testing
     # - run: |
      #    git status
       #   echo '----------------------------------------'
        #  cd more-testing
         # git status
